//Intermediate processing using WITH

MATCH (a:Person)-[:ACTED_IN]->(m:Movie)
RETURN a.name, count(a) AS numMovies,
       collect(m.title) as movies

// What if we wanted to return the actors who have made 2 or 3 movies only.
// As it is an aggregation we would have to wait for all nodes to be retrieved.

MATCH (a:Person)-[:ACTED_IN]->(m:Movie)
WITH  a, count(a) AS numMovies, collect(m.title) as movies
WHERE 1 < numMovies < 4
RETURN a.name, numMovies, movies

// WITH is like the SQL HAVING clause.
// Using WITH clause, you specify the variables from previous part of query
// you want to pass on to the next part of the query.
// So in the above a is passed on but m is not.
// Therefore, m will not be available in the later query.

// NOTE: you have to name all expressions with an alias in a WITH that
// existing variables.

// Using WITH and UNWIND

MATCH (m:Movie)<-[:ACTED_IN]-(p:Person)
WITH collect(p) AS actors,
count(p) AS actorCount, m
UNWIND actors AS actor
RETURN m.title, actorCount, actor.name

// The query creates a list of actors as well as the count of actors.
// The UNWIND clause turns the list of actors into rows of actors.

// Used a lot when importing data into a graph.

// Subqueries with WITH

MATCH (m:Movie)<-[rv:REVIEWED]-(r:Person)
WITH m, rv, r
MATCH (m)<-[:DIRECTED]-(d:Person)
RETURN m.title, rv.rating, r.name, collect(d.name)

MATCH (p:Person)
WITH p, size((p)-[:ACTED_IN]->()) AS movies
WHERE movies >= 5
OPTIONAL MATCH (p)-[:DIRECTED]->(m:Movie)
RETURN p.name, m.title

//Performing subqueries with CALL

// CALL clause, returns a set of nodes that you can use for a later query.
// in Example, m is called subquery to assist in next query.

CALL
{MATCH (p:Person)-[:REVIEWED]->(m:Movie)
RETURN  m}
MATCH (m) WHERE m.released=2000
RETURN m.title, m.released

// Examples

// Retrieve the actors who have acted in exactly five movies, returning the name of the actor, and the list of movies for that actor.
MATCH (a:Person)-[:ACTED_IN]->(m:Movie) 
WITH a, count(m) AS MovieCount, collect(m.title) AS MovieList 
WHERE MovieCount = 5 
RETURN a.name, MovieList

// Retrieve all actors that have not appeared in more than 3 movies. Return their names and list of movies.
MATCH (a:Person)-[:ACTED_IN]->(m:Movie) 
WITH a, COUNT(m) AS numMovies, COLLECT(m.title) AS movies 
WHERE numMovie <= 3 
RETURN a.name, movies

// Retrieve the movies that have at least 2 directors, and optionally the names of people who reviewed the movies.
MATCH (m:Movie)
WITH m, size((:Person)-[:DIRECTED]->(m)) AS directors
WHERE directors >= 2
OPTIONAL MATCH (p:Person)-[:REVIEWED]->(m)
RETURN  m.title, p.name

// Write a Cypher query that retrieves all actors that acted in movies, and collects the list of movies for any actor that acted in more than five movies. Return the name of the actor and the list.
MATCH (a:Person)-[:ACTED_IN]->(m:Movie) 
WITH a, collect(m.title) AS movies, size(collect(m.title)) AS numMovies 
WHERE numMovies > 5 
RETURN a.name, movies

// same as above
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WITH p, collect(m) AS movies
WHERE size(movies)  > 5
RETURN p.name, movies

//Modify the query you just wrote so that before the query processing ends, you unwind the list of movies and then return the name of the actor and the title of the associated movie
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WITH p, collect(m) AS movies
WHERE size(movies)  > 5
WITH p, movies UNWIND movies as movie
RETURN p.name, movie.title
