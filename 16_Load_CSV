// Loading data with Cypher

// you can:

// load data from a URL
// process data as a stream of records
// create or update the graph with the data being loaded
// use transactions during the load
// transform and convert values from the load stream
// load up to 10m nodes and relationships

// steps for loading data with Cypher

// basic steps for importing using cypher and csv files:
// 1. determine how CSV file will be structured
// 2. determine if normalised or denormalised data
// 3. ensure IDs to be used in the data are unique
// 4. ensure data in csv is clean
// 5. execute cypher code to inspect data
// 6. determine if data needs transforming
// 7. ensure constraints are created in graph
// 8. determine the size of the data to be loaded
// 9. execute cypher code to load the data
// 10. add indexes to the graph

// CSV file structure

// when using CSV files from relational databases:
// determine:
// the csv will have headers
// the delimiter for the fields in each row

// notes headers in csv reducdes syncing issues

// for extremely large csv best to use separate headers from data

// example

//personid,name,birthYear,deathYear
//23945,Gerad Pires, 1942,
//552509,Helen Reddy,1941,
//113934,Susan Flannery,1939

// default field terminator is comma (,).
// specify field separator with FIELDTERMINATOR

// normalised data

// denormalised data

// ids must be unique

// clean data

// checks to do:
// check headers that do not match
// are quotes used correctly
// if an element has no value will an empty string be used
// are UTF-8 prefixes used
// do some fields having trailing spaces
// do the fields contain binary zeros
// understand how lists are formed
// is comma the delimiter
// typos

// load data from file

LOAD CSV WITH HEADERS
FROM 'https://data.neo4j.com/v4.0-intro-neo4j/people.csv'
AS line
RETURN line LIMIT 10

// load data from local

// only from Neo4j Desktop

// Manage pane for database and select Open Folder->Import.

LOAD CSV WITH HEADERS
FROM 'file:///people.csv'
AS line
RETURN line LIMIT 10

// data transformation?

// by default data is interpreted as a string or null

// use:

// toInteger()
// toFloat()

// preview data transformation

LOAD CSV WITH HEADERS
FROM 'file:///movies1.csv'
AS line
RETURN toFloat(line.avgVote), line.genres, toInteger(line.movieId),
       line.title, toInteger(line.releaseYear) LIMIT 10

// transforming lists

// split() and coalesce()

LOAD CSV WITH HEADERS
FROM 'file:///movies1.csv'
AS line
RETURN toFloat(line.avgVote), split(coalesce(line.genres,""), ":"),
       toInteger(line.movieId), line.title, toInteger(line.releaseYear)
       LIMIT 10

// create a new database

// start a database

// from database information use database system

// create movies database
CREATE DATABASE movies

// look at databases
:dbs

// use movies database
:use movies

// create constraints before loading

CREATE CONSTRAINT UniqueMovieIdConstraint ON (m:Movie) ASSERT m.id IS UNIQUE;
CREATE CONSTRAINT UniquePersonIdConstraint ON (p:Person) ASSERT p.id IS UNIQUE

// use CREATE rather than MERGE to load data

// create additional indexes after loading data

// load CSV with headers

// check number of rows in csv

// need to have csv saved in import folder. open folder>import

LOAD CSV WITH HEADERS
FROM 'file:///people.csv'
AS line
RETURN count(line)

// LOAD CSV can load up to 100K lines/rows

// loading large CSV file

// if more than 100K rows:

// :auto USING PERIODIC COMMIT LOAD CSV

// loads 1000 rows at a time.

// :auto USING PERIODIC COMMIT can sometimes have issues

// cypher statements with eager operators will prevent the use of periodic commit.

// eager operators:
// collect()
// count()
// ORDER BY
// DISTINCT

// use APOC if periodic commit won't work.

// importing nodes

:auto USING PERIODIC COMMIT 500
LOAD CSV WITH HEADERS FROM
  'https://data.neo4j.com/v4.0-intro-neo4j/movies1.csv' as row
MERGE (m:Movie {id:toInteger(row.movieId)})
    ON CREATE SET
          m.title = row.title,
          m.avgVote = toFloat(row.avgVote),
          m.releaseYear = toInteger(row.releaseYear),
          m.genres = split(row.genres,":")

// importing relationships



LOAD CSV WITH HEADERS FROM
'https://data.neo4j.com/v4.0-intro-neo4j/directors.csv' AS row
MATCH (movie:Movie {id:toInteger(row.movieId)})
MATCH (person:Person {id: toInteger(row.personId)})
MERGE (person)-[:DIRECTED]->(movie)
ON CREATE SET person:Director

//finally add indexes

// Do this only after ALL data has been imported
CREATE INDEX MovieTitleIndex ON (m:Movie) FOR (m.title);
CREATE INDEX PersonNameIndex ON (p:Person) FOR (pname)

// Exercises

// use system

:use system

// create database

CREATE DATABASE importcsv

// use importcsv

:use importcsv

// cypher statement to read actor data from file,
// http://data.neo4j.com/v4.0-intro-neo4j/actors.csv

LOAD CSV WITH HEADERS
FROM 'http://data.neo4j.com/v4.0-intro-neo4j/actors.csv'
AS line
RETURN line.id, line.name, line.birthYear

// read data and return it, ensuring data is properly formatted

LOAD CSV WITH HEADERS FROM 'http://data.neo4j.com/v4.0-intro-neo4j/actors.csv' 
AS line 
RETURN line.id, line.name, toInteger(trim(line.birthYear))

// load data where you create Person nodes with properties:
// name, born, and actorId

LOAD CSV WITH HEADERS FROM 'http://data.neo4j.com/v4.0-intro-neo4j/actors.csv' 
AS line 
MERGE (actor:Person {name: line.name}) 
ON CREATE SET actor.born = toInteger(trim(line.birthYear)), actor.actorId = line.id 
ON MATCH SET actor.actorId = line.id

// load csv from http://data.neo4j.com/v4.0-intro-neo4j/movies.csv

LOAD CSV WITH HEADERS
FROM 'http://data.neo4j.com/v4.0-intro-neo4j/movies.csv'
AS line
RETURN line.id, line.title, line.year, line.tagline

// format data

LOAD CSV WITH HEADERS
FROM 'http://data.neo4j.com/v4.0-intro-neo4j/movies.csv'
AS line
RETURN line.id, line.title, toInteger(line.year), trim(line.tagline)

// load data create Movie nodes with properties: title, released, tagline and movieId

LOAD CSV WITH HEADERS FROM 'http://data.neo4j.com/v4.0-intro-neo4j/movies.csv' 
AS line 
MERGE (movie:Movie {title: line.title}) 
ON CREATE SET movie.released = toInteger(trim(line.year)), movie.movieId = line.id, movie.tagline = line.tagline

// load data from http://data.neo4j.com/v4.0-intro-neo4j/actor-roles.csv

LOAD CSV WITH HEADERS
FROM 'http://data.neo4j.com/v4.0-intro-neo4j/actor-roles.csv'
AS line FIELDTERMINATOR ';'
RETURN line.personId, line.movieId, line.Role

// properly format the data

LOAD CSV WITH HEADERS
FROM 'http://data.neo4j.com/v4.0-intro-neo4j/actor-roles.csv'
AS line FIELDTERMINATOR ';'
RETURN line.personId, line.movieId, split(line.Role,',')

// load the relationship data into your graph

LOAD CSV WITH HEADERS
FROM 'http://data.neo4j.com/v4.0-intro-neo4j/actor-roles.csv'
AS line FIELDTERMINATOR ';'
MATCH (movie:Movie { movieId: line.movieId })
MATCH (person:Person { actorId: line.personId })
MERGE (person)-[:ACTED_IN { roles: split(line.Role,',')}]->(movie)
